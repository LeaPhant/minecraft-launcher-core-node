{"version":3,"file":"index.esm.js","sources":["../../block.ts","../../player-model.ts","../../player.ts"],"sourcesContent":["import { BlockModel, PackMeta } from \"@xmcl/resourcepack\";\nimport { Material } from \"three/src/materials/Material\";\nimport { LinearFilter, NearestFilter } from \"three/src/constants\";\nimport { Object3D } from \"three/src/core/Object3D\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport { MeshBasicMaterial } from \"three/src/materials/MeshBasicMaterial\";\nimport { MeshLambertMaterial } from \"three/src/materials/MeshLambertMaterial\";\nimport { Mesh } from \"three/src/objects/Mesh\";\nimport { Group } from \"three/src/objects/Group\";\nimport { BoxGeometry } from \"three/src/geometries/BoxGeometry\";\nimport { Vector3 } from \"three/src/math/Vector3\";\nimport { Vector2 } from \"three/src/math/Vector2\";\nimport { BufferAttribute } from \"three/src/core/BufferAttribute\";\n\ninterface Texture {\n    url: string;\n    animation?: PackMeta.Animation;\n}\ntype TextureRegistry = Record<string, Texture>;\n\nexport const DEFAULT_TRANSFORM: BlockModel.Transform = {\n    rotation: [0, 0, 0],\n    translation: [0, 0, 0],\n    scale: [1, 1, 1],\n};\nexport const DEFAULT_DISPLAY: BlockModel.Display = {\n    ground: DEFAULT_TRANSFORM,\n    gui: DEFAULT_TRANSFORM,\n    thirdperson_lefthand: DEFAULT_TRANSFORM,\n    thirdperson_righthand: DEFAULT_TRANSFORM,\n    firstperson_lefthand: DEFAULT_TRANSFORM,\n    firstperson_righthand: DEFAULT_TRANSFORM,\n    fixed: DEFAULT_TRANSFORM,\n    head: DEFAULT_TRANSFORM,\n};\nexport const BUILTIN_GENERATED: BlockModel.Resolved = {\n    display: DEFAULT_DISPLAY,\n    ambientocclusion: false,\n    textures: {},\n    elements: [\n        {\n            from: [0, 0, 0],\n            to: [16, 16, 16],\n            faces: {\n                down: { uv: [0, 0, 16, 16], texture: \"\" },\n            },\n        }\n    ],\n    overrides: [],\n};\n\nfunction findRealTexturePath(model: BlockModel.Resolved, variantKey: string) {\n    let texturePath = model.textures[variantKey] as string;\n    while (texturePath.startsWith(\"#\")) {\n        const next = model.textures[texturePath.substring(1, texturePath.length)];\n        if (!next) {\n            return undefined;\n        }\n        texturePath = next;\n    }\n    return texturePath;\n}\n\nexport class BlockModelObject extends Object3D {\n    animationLoop: boolean = false;\n    displayOption: BlockModel.Display = DEFAULT_DISPLAY;\n\n    applyDisplay(option: string) {\n        const group = this.children[0];\n\n        if (option === \"block\") {\n\n            // reset transformations\n            group.rotation.set(0, 0, 0);\n            group.position.set(0, 0, 0);\n            group.scale.set(1, 1, 1);\n        } else {\n            if (!this.displayOption.hasOwnProperty(option)) {\n                throw new Error(\"Display option is invalid.\");\n            }\n\n            const options = (this.displayOption as any)[option];\n\n            const rot = options.rotation;\n            const pos = options.translation;\n            const scale = options.scale;\n\n            // apply transformations\n            group.rotation.set(rot[0] * Math.PI / 180, rot[1] * Math.PI / 180, rot[2] * Math.PI / 180);\n            group.position.set(pos[0], pos[1], pos[2]);\n            group.scale.set(scale[0] === 0 ? 0.00001 : scale[0], scale[1] === 0 ? 0.00001 : scale[1], scale[2] === 0 ? 0.00001 : scale[2]);\n        }\n    }\n\n    getCenter() {\n        const group = this.children[0];\n\n        // compute absolute bounding box\n        const box = {\n            minx: 0, miny: 0, minz: 0,\n            maxx: 0, maxy: 0, maxz: 0,\n        };\n\n        for (let i = 0; i < group.children.length; i++) {\n\n            const pivot = group.children[i];\n            const mesh = pivot.children[0] as Mesh;\n            const geo = mesh.geometry as BoxGeometry;\n\n            // for (let j = 0; j < geo.vertices.length; j++) {\n            //     // convert vertex coordinates to world coordinates\n            //     const vertex = geo.vertices[j].clone();\n            //     const abs = mesh.localToWorld(vertex);\n\n            //     // update bounding box\n\n            //     if (abs.x < box.minx) { box.minx = abs.x; }\n            //     if (abs.y < box.miny) { box.miny = abs.y; }\n            //     if (abs.z < box.minz) { box.minz = abs.z; }\n\n            //     if (abs.x > box.maxx) { box.maxx = abs.x; }\n            //     if (abs.y > box.maxy) { box.maxy = abs.y; }\n            //     if (abs.z > box.maxz) { box.maxz = abs.z; }\n            // }\n        }\n\n        // return the center of the bounding box\n\n        return new Vector3(\n            (box.minx + box.maxx) / 2,\n            (box.miny + box.maxy) / 2,\n            (box.minz + box.maxz) / 2,\n        );\n    }\n}\n\nexport class BlockModelFactory {\n    private static TRANSPARENT_MATERIAL = new MeshBasicMaterial({ transparent: true, opacity: 0, alphaTest: 0.5 });\n\n    private loader = new TextureLoader();\n    private cachedMaterial: Record<string, Material> = {};\n\n    constructor(readonly textureRegistry: TextureRegistry, readonly option: { clipUVs?: boolean, modelOnly?: boolean } = {}) { }\n\n    /**\n     * Get threejs `Object3D` for that block model.\n     */\n    async getObject(model: BlockModel.Resolved, options?: { uvlock?: boolean; y?: number; x?: number, waitForTextures?: boolean }) {\n        const option = this.option;\n        const textureRegistry = this.textureRegistry;\n\n        const clipUVs = option.clipUVs || false;\n        const modelOnly = option.modelOnly || false;\n\n        const obj = new BlockModelObject();\n        const group = new Group();\n        group.name = \"wrapper\";\n\n        const materials: Material[] = [BlockModelFactory.TRANSPARENT_MATERIAL];\n        const materialIndexes: { [variant: string]: number } = {};\n\n        const materialPathIndexes: { [texPath: string]: number } = {};\n        for (const variant of Object.keys(model.textures)) {\n            const texPath = findRealTexturePath(model, variant);\n            let materialIndex = 0;\n\n            if (!texPath) {\n                console.error(`Cannot find texture @${texPath}`);\n            } else {\n                let materialPathIndex = materialPathIndexes[texPath];\n                if (materialPathIndex) {\n                    // noop\n                } else if (texPath in this.cachedMaterial) {\n                    materialPathIndex = materials.length;\n                    materials.push(this.cachedMaterial[texPath]);\n                } else if (texPath in textureRegistry) {\n                    // build new material\n                    const tex = textureRegistry[texPath];\n\n                    let texture: any;\n\n                    if (options?.waitForTextures === true) {\n                        texture = await new Promise((r) => {\n                            this.loader.load(tex.url, (texture: any) => {\n                                r(texture);\n                            });\n                        });\n                    } else {\n                        texture = this.loader.load(tex.url);\n                    }\n\n                    // sharp pixels and smooth edges\n                    texture.magFilter = NearestFilter;\n                    texture.minFilter = LinearFilter;\n\n                    // map texture to material, keep transparency and fix transparent z-fighting\n                    const mat = new MeshLambertMaterial({ map: texture, transparent: true, alphaTest: 0.5 });\n\n                    materialPathIndex = materials.length;\n                    this.cachedMaterial[texPath] = mat;\n\n                    materials.push(mat);\n                }\n                materialPathIndexes[texPath] = materialPathIndex;\n                materialIndex = materialPathIndex;\n            }\n\n            materialIndexes[variant] = materialIndex;\n        }\n\n        for (const element of model.elements) {\n            // get dimensions and origin\n            const width = element.to[0] - element.from[0];\n            const height = element.to[1] - element.from[1];\n            const length = element.to[2] - element.from[2];\n\n            const origin = {\n                x: (element.to[0] + element.from[0]) / 2 - 8,\n                y: (element.to[1] + element.from[1]) / 2 - 8,\n                z: (element.to[2] + element.from[2]) / 2 - 8,\n            };\n\n            const fix = 0.001;\n            const blockGeometry = new BoxGeometry(width + fix, height + fix, length + fix);\n            const blockMesh = new Mesh(blockGeometry, materials);\n            blockMesh.name = \"block-element\";\n            blockGeometry.clearGroups()\n\n            blockMesh.position.x = origin.x;\n            blockMesh.position.y = origin.y;\n            blockMesh.position.z = origin.z;\n\n            const uvAttr: Vector2[] = []\n\n            const faces = [\"east\", \"west\", \"up\", \"down\", \"south\", \"north\"] as const;\n\n            const getDefaultUv = (i: number) => [\n                [\n                    // east\n                    element.from[2],\n                    element.from[1],\n                    element.to[2],\n                    element.to[1],\n                ],\n                [\n                    // west\n                    element.from[2],\n                    element.from[1],\n                    element.to[2],\n                    element.to[1],\n                ],\n                [\n                    // up\n                    element.from[0],\n                    element.from[2],\n                    element.to[0],\n                    element.to[2],\n                ],\n                [\n                    // down\n                    element.from[0],\n                    element.from[2],\n                    element.to[0],\n                    element.to[2],\n                ],\n                [\n                    // south\n                    element.from[0],\n                    element.from[1],\n                    element.to[0],\n                    element.to[1],\n                ],\n                [\n                    // north\n                    element.from[0],\n                    element.from[1],\n                    element.to[0],\n                    element.to[1],\n                ]\n            ][i]\n\n            for (let i = 0; i < 6; i++) {\n                const face = element.faces[faces[i]];\n                let materialIndex = 0\n                let uv: number[]\n                if (face) {\n                    // get material index\n                    materialIndex = materialIndexes[face.texture.substring(1, face.texture.length)];  // references.indexOf(ref[0] == '#' ? ref.substring(1) : ref)\n\n                    uv = face.uv || getDefaultUv(i);\n\n                    if (clipUVs) {\n                        uv = uv.map((e) => {\n                            if (e + 0.00001 < 0) {\n                                return 0;\n                            } else if (e - 0.00001 > 16) {\n                                return 16;\n                            } else {\n                                return e;\n                            }\n                        });\n                    }\n\n                    uv = uv.map((e) => e / 16);\n                } else {\n                    uv = [0, 0, 1, 1]\n                    // transparent material\n                }\n                const [x1, y1, x2, y2] = uv\n                let map = [\n                    new Vector2(x1, y2),\n                    new Vector2(x2, y2),\n                    new Vector2(x1, y1),\n                    new Vector2(x2, y1),\n                ];\n                if (face && face.rotation) {\n                    const amount = face.rotation;\n                    // check property\n                    if (!([0, 90, 180, 270].indexOf(amount) >= 0)) {\n                        console.error(\"The \\\"rotation\\\" property for \\\"\" + face + \"\\\" face is invalid (got \\\"\" + amount + \"\\\").\");\n                    }\n                    // rotate map\n                    for (let j = 0; j < amount / 90; j++) {\n                        map = [map[1], map[2], map[3], map[0]];\n                    }\n                }\n\n                uvAttr.push(...map)\n                blockGeometry.addGroup(i * 6, 6, materialIndex)\n                // blockGeometry.uvsNeedUpdate = true;\n            }\n            blockGeometry.setAttribute(\"uv\", new BufferAttribute(\n                new Float32Array(uvAttr.length * 2), 2).copyVector2sArray(uvAttr))\n\n            /**\n             * bake rotation start\n             */\n            if (element.rotation) {\n                // get origin, axis and angle\n                const rotationOrigin = {\n                    x: element.rotation.origin[0] - 8,\n                    y: element.rotation.origin[1] - 8,\n                    z: element.rotation.origin[2] - 8,\n                };\n\n                const axis = element.rotation.axis;\n                const angle = element.rotation.angle;\n\n                // create pivot\n                const pivot = new Group();\n                pivot.name = \"pivot\";\n                pivot.position.x = rotationOrigin.x;\n                pivot.position.y = rotationOrigin.y;\n                pivot.position.z = rotationOrigin.z;\n\n                pivot.add(blockMesh);\n\n                // adjust mesh coordinates\n                blockMesh.position.x -= rotationOrigin.x;\n                blockMesh.position.y -= rotationOrigin.y;\n                blockMesh.position.z -= rotationOrigin.z;\n\n                // rotate pivot\n                if (axis === \"x\") {\n                    pivot.rotateX(angle * Math.PI / 180);\n                } else if (axis === \"y\") {\n                    pivot.rotateY(angle * Math.PI / 180);\n                } else if (axis === \"z\") {\n                    pivot.rotateZ(angle * Math.PI / 180);\n                }\n\n                group.add(pivot);\n            } else {\n                const pivot = new Group();\n                pivot.name = \"pivot\";\n                pivot.add(blockMesh);\n                group.add(pivot);\n            }\n        }\n        obj.add(group);\n\n        return obj;\n    }\n}\n","export interface ModelTemplate {\n    head: Part;\n    rightLeg: Part;\n    leftLeg: Part;\n    torso: Part;\n    leftArm: Part;\n    rightArm: Part;\n    cape: Transform & CubeUVMapping;\n}\nexport interface Dimension {\n    h: number;\n    w: number;\n    d: number;\n}\nexport interface CubeUVMapping {\n    top: number[];\n    bottom: number[];\n    right: number[];\n    front: number[];\n    left: number[];\n    back: number[];\n}\nexport interface Translation {\n    x: number;\n    y: number;\n    z: number;\n}\nexport interface Transform extends Translation, Dimension {\n}\nexport interface Part extends Transform, CubeUVMapping {\n    layer: Dimension & CubeUVMapping & Partial<Translation>;\n}\nfunction createGroup(slim: boolean): ModelTemplate {\n    return {\n        head: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 9,\n                h: 9,\n                d: 9,\n                top: [40, 0, 48, 8],\n                bottom: [48, 0, 56, 8],\n                right: [32, 8, 40, 16],\n                front: [40, 8, 48, 16],\n                left: [48, 8, 56, 16],\n                back: [56, 8, 64, 16],\n            },\n            top: [8, 0, 16, 8],\n            bottom: [24, 8, 16, 0],\n            right: [0, 8, 8, 16],\n            front: [8, 8, 16, 16],\n            left: [16, 8, 24, 16],\n            back: [24, 8, 32, 16],\n        },\n        rightLeg: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 4.5,\n                d: 4.5,\n                h: 13.5,\n                top: [4, 48, 8, 36],\n                bottom: [8, 48, 12, 36],\n                right: [0, 36, 4, 48],\n                front: [4, 36, 8, 48],\n                left: [8, 36, 12, 48],\n                back: [12, 36, 16, 48],\n            },\n            top: [4, 16, 8, 20],\n            bottom: [8, 16, 12, 20],\n            right: [0, 20, 4, 32],\n            front: [4, 20, 8, 32],\n            left: [8, 20, 12, 32],\n            back: [12, 20, 16, 32],\n        },\n        torso: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 9,\n                h: 13.5,\n                d: 4.5,\n                top: [20, 48, 28, 36],\n                bottom: [28, 48, 36, 36],\n                right: [16, 36, 20, 48],\n                front: [20, 36, 28, 48],\n                left: [28, 36, 32, 48],\n                back: [32, 36, 40, 48],\n            },\n            top: [20, 16, 28, 20],\n            bottom: [28, 16, 36, 20],\n            right: [16, 20, 20, 32],\n            front: [20, 20, 28, 32],\n            left: [28, 20, 32, 32],\n            back: [32, 20, 40, 32],\n        },\n        leftArm: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 4.5,\n                h: 13.5,\n                d: 4.5,\n                top: [52, 48, 56, 52],\n                bottom: [56, 48, 60, 52],\n                right: [48, 52, 52, 64],\n                front: [52, 52, 56, 64],\n                left: [56, 52, 60, 64],\n                back: [60, 52, 64, 64],\n            },\n\n            top: [36, 48, slim ? 39 : 40, 52],\n            bottom: [slim ? 39 : 40, 48, slim ? 42 : 44, 52],\n            left: [32, 52, 36, 64],\n            front: [36, 52, slim ? 39 : 40, 64],\n            right: [slim ? 39 : 40, 52, slim ? 43 : 44, 64],\n            back: [slim ? 43 : 44, 52, slim ? 46 : 48, 64],\n        },\n        rightArm: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 4.5,\n                h: 13.5,\n                d: 4.5,\n                top: [44, 48, 48, 36],\n                bottom: [48, 48, 52, 36],\n                left: [48, 36, 52, 48],\n                front: [44, 36, 48, 48],\n                right: [40, 36, 44, 48],\n                back: [52, 36, 64, 48],\n            },\n            top: [44, 16, slim ? 47 : 48, 20],\n            bottom: [slim ? 47 : 48, 16, slim ? 50 : 52, 20],\n            left: [40, 20, 44, 32],\n            front: [44, 20, slim ? 47 : 48, 32],\n            right: [slim ? 47 : 48, 20, slim ? 51 : 52, 32],\n            back: [slim ? 51 : 52, 20, slim ? 54 : 56, 32],\n        },\n        leftLeg: {\n            h: 0,\n            w: 0,\n            d: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            layer: {\n                w: 4.5,\n                d: 4.5,\n                h: 13.5,\n                top: [4, 48, 8, 52],\n                bottom: [8, 48, 12, 52],\n                right: [0, 52, 4, 64],\n                front: [4, 52, 8, 64],\n                left: [8, 52, 12, 64],\n                back: [12, 52, 16, 64],\n            },\n            top: [20, 48, 24, 52],\n            bottom: [24, 48, 28, 52],\n            right: [16, 52, 20, 64],\n            front: [20, 52, 24, 64],\n            left: [24, 52, 28, 64],\n            back: [28, 52, 32, 64],\n        },\n\n        cape: {\n            x: 0,\n            y: 0,\n            z: 0,\n            h: 0,\n            w: 0,\n            d: 0,\n            top: [1, 0, 11, 1],\n            bottom: [11, 0, 21, 1],\n            left: [11, 1, 12, 17],\n            front: [12, 1, 22, 17],\n            right: [0, 1, 1, 17],\n            back: [1, 1, 11, 17],\n        },\n    };\n}\n\nconst PIXRATIO = 1 / 32;\n\nfunction create(slim: boolean) {\n    function decorateDimension(group: ModelTemplate) {\n        function calculate(model: Part) {\n            return {\n                h: Math.abs(model.front[1] - model.front[3]) * PIXRATIO,\n                w: Math.abs(model.front[0] - model.front[2]) * PIXRATIO,\n                d: Math.abs(model.right[0] - model.right[2]) * PIXRATIO,\n            };\n        }\n        for (const part of Object.values(group)) {\n            Object.assign(part, calculate(part));\n            if (\"layer\" in part) {\n                part.layer.w *= PIXRATIO;\n                part.layer.h *= PIXRATIO;\n                part.layer.d *= PIXRATIO;\n            }\n        }\n        return group;\n    }\n    function decoratePos(group: ModelTemplate) {\n        const charH = 1;\n        group.head.y = charH - group.head.h / 2;\n        group.torso.y = group.rightLeg.h + group.torso.h / 2;\n\n        group.rightLeg.x = -group.rightLeg.w / 2;\n        group.rightLeg.y = group.rightLeg.h / 2;\n        group.leftLeg.x = group.leftLeg.w / 2;\n        group.leftLeg.y = group.leftLeg.h / 2;\n\n        group.rightArm.x = -group.torso.w / 2 - group.rightArm.w / 2;\n        group.rightArm.y = group.rightLeg.h + group.torso.h - group.rightArm.h / 2;\n\n        group.leftArm.x = group.torso.w / 2 + group.leftArm.w / 2;\n        group.leftArm.y = group.leftLeg.h + group.torso.h - group.leftArm.h / 2;\n\n        group.cape.y = group.rightLeg.h + group.torso.h / 5 * 2;\n        group.cape.z = -group.torso.d * 3 / 2;\n        return group;\n    }\n    return decoratePos(decorateDimension(createGroup(slim)));\n}\n\nexport default {\n    steve: create(false),\n    alex: create(true),\n};\n","import { BufferAttribute, Texture, Vector2 } from \"three\";\nimport { Geometry } from \"three/examples/jsm/deprecated/Geometry\";\nimport { DoubleSide, NearestFilter } from \"three/src/constants\";\nimport { Object3D } from \"three/src/core/Object3D\";\nimport { BoxGeometry } from \"three/src/geometries/BoxGeometry\";\nimport { BoxHelper } from \"three/src/helpers/BoxHelper\";\nimport { MeshBasicMaterial } from \"three/src/materials/MeshBasicMaterial\";\nimport { Color } from \"three/src/math/Color\";\nimport { Mesh } from \"three/src/objects/Mesh\";\nimport { CanvasTexture } from \"three/src/textures/CanvasTexture\";\nimport format, { CubeUVMapping, ModelTemplate } from \"./player-model\";\n\nfunction convertLegacySkin(context: CanvasRenderingContext2D, width: number) {\n    const scale = width / 64.0;\n\n    function copySkin(ctx: CanvasRenderingContext2D, sX: number, sY: number, w: number, h: number, dX: number, dY: number, flipHorizontal: boolean) {\n        sX *= scale;\n        sY *= scale;\n        w *= scale;\n        h *= scale;\n        dX *= scale;\n        dY *= scale;\n\n        const imgData = ctx.getImageData(sX, sY, w, h);\n        if (flipHorizontal) {\n            for (let y = 0; y < h; y++) {\n                for (let x = 0; x < (w / 2); x++) {\n                    const index = (x + y * w) * 4;\n                    const index2 = ((w - x - 1) + y * w) * 4;\n                    const pA1 = imgData.data[index];\n                    const pA2 = imgData.data[index + 1];\n                    const pA3 = imgData.data[index + 2];\n                    const pA4 = imgData.data[index + 3];\n\n                    const pB1 = imgData.data[index2];\n                    const pB2 = imgData.data[index2 + 1];\n                    const pB3 = imgData.data[index2 + 2];\n                    const pB4 = imgData.data[index2 + 3];\n\n                    imgData.data[index] = pB1;\n                    imgData.data[index + 1] = pB2;\n                    imgData.data[index + 2] = pB3;\n                    imgData.data[index + 3] = pB4;\n\n                    imgData.data[index2] = pA1;\n                    imgData.data[index2 + 1] = pA2;\n                    imgData.data[index2 + 2] = pA3;\n                    imgData.data[index2 + 3] = pA4;\n                }\n            }\n        }\n        ctx.putImageData(imgData, dX, dY);\n    }\n\n    copySkin(context, 4, 16, 4, 4, 20, 48, true); // Top Leg\n    copySkin(context, 8, 16, 4, 4, 24, 48, true); // Bottom Leg\n    copySkin(context, 0, 20, 4, 12, 24, 52, true); // Outer Leg\n    copySkin(context, 4, 20, 4, 12, 20, 52, true); // Front Leg\n    copySkin(context, 8, 20, 4, 12, 16, 52, true); // Inner Leg\n    copySkin(context, 12, 20, 4, 12, 28, 52, true); // Back Leg\n    copySkin(context, 44, 16, 4, 4, 36, 48, true); // Top Arm\n    copySkin(context, 48, 16, 4, 4, 40, 48, true); // Bottom Arm\n    copySkin(context, 40, 20, 4, 12, 40, 52, true); // Outer Arm\n    copySkin(context, 44, 20, 4, 12, 36, 52, true); // Front Arm\n    copySkin(context, 48, 20, 4, 12, 32, 52, true); // Inner Arm\n    copySkin(context, 52, 20, 4, 12, 44, 52, true); // Back Arm\n}\n\ntype TextureSource = string | HTMLImageElement | URL;\n\n\nfunction mapCubeUV(mesh: Mesh, src: CubeUVMapping) {\n    const material = mesh.material as MeshBasicMaterial;\n    const texture = material.map!;\n    const tileUvW = 1 / texture.image.width;\n    const tileUvH = 1 / texture.image.height;\n    const uvs: Vector2[] = []\n    /**\n     * Set the box mesh UV to the Minecraft skin texture\n     */\n    function mapUV(x1: number, y1: number, x2: number, y2: number) {\n        x1 *= tileUvW;\n        x2 *= tileUvW;\n        y1 = 1 - (y1 * tileUvH);\n        y2 = 1 - (y2 * tileUvH);\n\n        uvs.push(\n            new Vector2(x1, y1),\n            new Vector2(x2, y1),\n            new Vector2(x1, y2),\n            new Vector2(x2, y2),\n        )\n    }\n\n    const faces = [\"left\", \"right\", \"top\", \"bottom\", \"front\", \"back\"] as const;\n    for (let i = 0; i < faces.length; i++) {\n        const uvs = src[faces[i]];\n        mapUV(uvs[0], uvs[1], uvs[2], uvs[3]);\n    }\n    const attr = new BufferAttribute(new Float32Array(uvs.length * 2), 2).copyVector2sArray(uvs)\n    mesh.geometry.setAttribute(\"uv\", attr);\n}\n\nexport class PlayerObject3D extends Object3D {\n    private _slim: boolean = false;\n\n    constructor(skin: MeshBasicMaterial, cape: MeshBasicMaterial, transparent: MeshBasicMaterial, slim: boolean) {\n        super();\n        this._slim = slim;\n        buildPlayerModel(this, skin, cape, transparent, slim);\n    }\n\n    get slim() {\n        return this._slim;\n    }\n\n    set slim(slim: boolean) {\n        if (slim !== this._slim) {\n            const template = slim ? format.alex : format.steve;\n            const leftArm = this.getObjectByName(\"leftArm\")! as Mesh;\n            const rightArm = this.getObjectByName(\"rightArm\")! as Mesh;\n\n            leftArm.geometry = new BoxGeometry(template.leftArm.w, template.leftArm.h, template.leftArm.d);\n            mapCubeUV(leftArm, template.leftArm);\n            rightArm.geometry = new BoxGeometry(template.rightArm.w, template.rightArm.h, template.rightArm.d);\n            mapCubeUV(rightArm, template.rightArm);\n\n            const leftArmLayer = this.getObjectByName(\"leftArmLayer\")! as Mesh;\n            const rightArmLayer = this.getObjectByName(\"rightArmLayer\")! as Mesh;\n            if (leftArmLayer) {\n                leftArmLayer.geometry = new BoxGeometry(template.leftArm.layer.w, template.leftArm.layer.h, template.leftArm.layer.d);\n                mapCubeUV(leftArmLayer, template.leftArm.layer);\n            }\n            if (rightArmLayer) {\n                rightArmLayer.geometry = new BoxGeometry(template.rightArm.layer.w, template.rightArm.layer.h, template.rightArm.layer.d);\n                mapCubeUV(rightArmLayer, template.rightArm.layer);\n            }\n        }\n        this._slim = slim;\n    }\n}\n\nfunction buildPlayerModel(root: Object3D, skin: MeshBasicMaterial, cape: MeshBasicMaterial, transparent: MeshBasicMaterial, slim: boolean): Object3D {\n    const template = slim ? format.alex : format.steve;\n    const partsNames: Array<keyof ModelTemplate> = Object.keys(template) as any;\n\n    for (const partName of partsNames) {\n        const model = template[partName];\n\n        const mesh = new Mesh(new BoxGeometry(model.w, model.h, model.d),\n            partName === \"cape\" ? cape : skin);\n\n        mesh.name = partName;\n        if (model.y) { mesh.position.y = model.y; }\n        if (model.x) { mesh.position.x = model.x; }\n        if (model.z) { mesh.position.z = model.z; }\n        if (partName === \"cape\") {\n            mesh.rotation.x = 25 * (Math.PI / 180);\n        }\n        mapCubeUV(mesh, model);\n\n        const box = new BoxHelper(mesh, new Color(0xffffff));\n        box.name = `${partName}Box`;\n        box.visible = false;\n        mesh.add(box);\n\n        if (\"layer\" in model) {\n            const layer = model.layer;\n            const layerMesh = new Mesh(new BoxGeometry(layer.w, layer.h, layer.d), transparent);\n            layerMesh.name = `${partName}Layer`;\n            if (layer.y) { layerMesh.position.y = layer.y; }\n            if (layer.x) { layerMesh.position.x = layer.x; }\n            if (layer.z) { layerMesh.position.z = layer.z; }\n\n            mapCubeUV(layerMesh, layer);\n\n            mesh.add(layerMesh);\n        }\n\n        root.add(mesh);\n    }\n\n    return root;\n}\n\nfunction ensureImage(textureSource: TextureSource) {\n    if (textureSource instanceof Image) {\n        return textureSource;\n    }\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = \"anonymous\"\n        img.onload = () => { resolve(img); };\n        img.onerror = (e, source, lineno, colno, error) => { reject(error) }\n        if (textureSource instanceof URL) {\n            img.src = textureSource.toString()\n        } else {\n            img.src = textureSource\n        }\n    });\n}\n\nexport class PlayerModel {\n    static create() { return new PlayerModel(); }\n\n    readonly playerObject3d: PlayerObject3D;\n    readonly materialPlayer: MeshBasicMaterial;\n    readonly materialTransparent: MeshBasicMaterial;\n    readonly materialCape: MeshBasicMaterial;\n    readonly textureCape: CanvasTexture;\n    readonly texturePlayer: CanvasTexture;\n\n    constructor() {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 64;\n        canvas.height = 64;\n        const texture = new CanvasTexture(canvas);\n        texture.magFilter = NearestFilter;\n        texture.minFilter = NearestFilter;\n        this.texturePlayer = texture;\n        texture.name = \"skinTexture\";\n\n        this.materialPlayer = new MeshBasicMaterial({ map: texture });\n\n        this.materialTransparent = new MeshBasicMaterial({\n            map: texture,\n            transparent: true,\n            depthWrite: false,\n            side: DoubleSide,\n        });\n\n        const textureCape = new CanvasTexture(document.createElement(\"canvas\"));\n        textureCape.magFilter = NearestFilter;\n        textureCape.minFilter = NearestFilter;\n        textureCape.name = \"capeTexture\";\n        this.textureCape = textureCape;\n\n        const materialCape = new MeshBasicMaterial({\n            map: this.textureCape,\n        });\n        materialCape.name = \"capeMaterial\";\n        materialCape.visible = false;\n        this.materialCape = materialCape;\n\n        this.playerObject3d = new PlayerObject3D(this.materialPlayer, this.materialCape, this.materialTransparent, false);\n    }\n\n    /**\n     * @param skin The skin texture source. Should be url string, URL object, or a Image HTML element\n     * @param isSlim Is this skin slim\n     */\n    async setSkin(skin: TextureSource, isSlim: boolean = false) {\n        this.playerObject3d.slim = isSlim;\n        const texture = this.texturePlayer;\n        const i = await ensureImage(skin);\n        const legacy = i.width !== i.height;\n        const canvas = texture.image;\n        const context = canvas.getContext(\"2d\");\n        canvas.width = i.width;\n        canvas.height = i.width;\n        context.clearRect(0, 0, i.width, i.width);\n        if (legacy) {\n            context.drawImage(i, 0, 0, i.width, i.width / 2.0);\n            convertLegacySkin(context, i.width);\n        } else {\n            context.drawImage(i, 0, 0, i.width, i.width);\n        }\n        texture.needsUpdate = true;\n    }\n\n    async setCape(cape: TextureSource | undefined) {\n        if (cape === undefined) {\n            this.materialCape.visible = false;\n            return;\n        }\n        this.materialCape.visible = true;\n        const img = await ensureImage(cape);\n        const texture = this.textureCape;\n        texture.image = img;\n        texture.needsUpdate = true;\n    }\n\n    // name(name) {\n    //     if (name === undefined || name === \"\" || name === null) {\n    //         if (this.nameTagObject === null) { return this; }\n    //         this.root.remove(this.nameTagObject);\n    //         this.nameTagObject = null;\n    //     }\n    //     if (this.nameTagObject) { this.clear(); }\n    //     // build the texture\n    //     const canvas = buildNameTag(name);\n    //     const texture = new Texture(canvas);\n    //     texture.needsUpdate = true;\n    //     // build the sprite itself\n    //     const material = new SpriteMaterial({\n    //         map: texture,\n    //         // useScreenCoordinates: false\n    //     });\n    //     const sprite = new Sprite(material);\n    //     this.nameTagObject = sprite;\n    //     sprite.position.y = 1.15;\n    //     // add sprite to the character\n    //     this.root.add(this.nameTagObject);\n    //     return this;\n    // }\n\n    // load(option) {\n    //     if (!option) { return this; }\n    //     if (option.skin) { this.loadSkin(option.skin); }\n    //     if (option.cape) { this.loadCape(option.skin); }\n    //     return this;\n    // }\n\n    // say(text, expire = 4) {\n    //     expire *= 1000;\n    //     if (this.speakExpire) {\n    //         clearTimeout(this.speakExpire);\n    //         this.root.remove(this.speakBox);\n    //         this.speakBox = null;\n    //         this.speakExpire = null;\n    //     }\n    //     this.speakExpire = setTimeout(() => {\n    //         this.root.remove(this.speakBox);\n    //         this.speakBox = null;\n    //         this.speakExpire = null;\n    //     }, expire);\n\n    //     // build the texture\n    //     const canvas = buildChatBox(text);\n    //     const texture = new Texture(canvas);\n    //     texture.needsUpdate = true;\n    //     // build the sprite itself\n    //     const material = new SpriteMaterial({\n    //         map: texture,\n    //         // useScreenCoordinates: false\n    //     });\n    //     const sprite = new Sprite(material);\n    //     this.speakBox = sprite;\n    //     sprite.scale.multiplyScalar(4);\n    //     sprite.position.y = 1.5;\n    //     // add sprite to the character\n    //     this.root.add(this.speakBox);\n    //     return this;\n    // }\n}\n\nexport default PlayerModel;\n\n"],"names":["Vector2","BufferAttribute"],"mappings":"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"}